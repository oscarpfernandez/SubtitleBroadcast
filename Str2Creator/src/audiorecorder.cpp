#include <QtGui>
#include "audiorecorder.h"
#include "audiowav.h"

/******************************************************************************
 * Description:
 * The purpose of this class is to create the Media Player dialog that allows
 * the user to play or record the audio files generated by the TTS engine.
 ******************************************************************************/

AudioRecorder::AudioRecorder(QWidget *parent, QMainWindow *window)
    : QDialog(parent)
{
    mainwin = window;
    resize(90,90);
    setWindowTitle(tr("Media Player"));

    cronometro.setHMS(0,0,0,0);

    relojLCD = new QLCDNumber(this);
    relojLCD->setSegmentStyle(QLCDNumber::Filled);
    relojLCD->setNumDigits(9);
    relojLCD->setFont(QFont("System",14));
    relojLCD->resize(35,15);
    relojLCD->setMaximumWidth(130);
    relojLCD->setMaximumHeight(90);
    relojLCD->display(tr("00:00.000"));

    //Reloj hace que se dispare el slot crono
    reloj = new QTimer(this);
    reloj->setInterval(100);
    connect(reloj, SIGNAL(timeout()), this, SLOT(crono()));
    stop = true;

    AudioRecorder::createElements();
    AudioRecorder::createLayout();

    audioOutput = new Phonon::AudioOutput(Phonon::MusicCategory, this);
    mediaObject = new Phonon::MediaObject(this);
    Phonon::createPath(mediaObject, audioOutput);

    frecuencia_seleccionada = 16000;
}

/******************************************************************************
 * Creates the widget's elements
 ******************************************************************************/
void AudioRecorder::createElements()
{
    texto1 = new QLabel(tr("Index"));
    texto1->setFont(COMMON_LABEL_FONT);
    texto2 = new QLabel(tr("Dispositivo de entrada:"));
    texto2->setFont(COMMON_LABEL_FONT);
    texto3 = new QLabel(tr("Delay (ms):"));
    texto3->setFont(COMMON_LABEL_FONT);
    texto4 = new QLabel(tr("Sampling rate (Hz):"));
    texto4->setFont(COMMON_LABEL_FONT);


    retraso = new QLineEdit;
    retraso->setText(tr("00:00.000"));
    retraso->setAlignment(Qt::AlignCenter);
    retraso->setFont(COMMON_LABEL_FONT);
    retraso->setMaximumWidth(70);

    indice = new QSpinBox;
    indice->setMinimum(1);
    indice->setMaximum(5000);
    indice->setFont(COMMON_LABEL_FONT);

    check_audiodes = new QCheckBox(tr("Description"));
    check_audiodes->setChecked(true);
    check_audiodes->setFont(COMMON_LABEL_FONT);
    check_audiodob = new QCheckBox(tr("Subtitle"));
    check_audiodob->setFont(COMMON_LABEL_FONT);

    boton_rec = new QPushButton(/*tr("Rec")*/);
    boton_rec->setIcon(QIcon(":/icons/Record.png"));
    boton_rec->setIconSize(QSize(20,20));
    boton_play = new QPushButton(/*tr("Play")*/);
    boton_play->setIcon(QIcon(":/icons/play.png"));
    boton_play->setIconSize(QSize(20,20));
    boton_pause = new QPushButton(/*tr("Pause")*/);
    boton_pause->setIcon(QIcon(tr(":/icons/pause.png")));
    boton_pause->setIconSize(QSize(20,20));
    boton_stop = new QPushButton(/*tr("Stop")*/);
    boton_stop->setIcon(QIcon(":/icons/stop.png"));
    boton_stop->setIconSize(QSize(20,20));

    audioRecorderDockWidget = new QDockWidget(tr("Media Player"));
    audioRecorderDockWidget->setObjectName("audioPlayerDockWidget");
    audioRecorderDockWidget->setWidget(this);
    audioRecorderDockWidget->setAllowedAreas(Qt::LeftDockWidgetArea
                                             | Qt::RightDockWidgetArea
                                             | Qt::BottomDockWidgetArea
                                             | Qt::TopDockWidgetArea);


    frecuencias_muestreo = new QComboBox(this);
    QAudioDeviceInfo info(QAudioDeviceInfo::defaultInputDevice());
    frecuencias = info.supportedFrequencies();

//    texto5 = new QLabel(tr("Idioma de la grabación: "));
//    idiomas = new QComboBox(this);
//    lista_idiomas << "Castellano" << "Inglés" << "Catalán" << "Francés" << "Italiano" << "Alemán";
//    for(int i = 0; i < lista_idiomas.size(); i++ )
//        idiomas->addItem(lista_idiomas.at(i));

    for(int i = 0; i < frecuencias.size(); i++ )
        frecuencias_muestreo->addItem(QString::number(frecuencias.at(i)));

    connect(boton_rec, SIGNAL(clicked()),this, SLOT(grabar()));
    connect(boton_stop, SIGNAL(clicked()),this, SLOT(parar()));
    connect(boton_play, SIGNAL(clicked()),this, SLOT(reproducir()));
    connect(check_audiodes,SIGNAL(clicked()),this,SLOT(modo_audiodescriptor()));
    connect(check_audiodob,SIGNAL(clicked()),this,SLOT(modo_audiodoblado()));
    connect(frecuencias_muestreo, SIGNAL(activated(int)),this,SLOT(cambio_frecuencia()));
}


/******************************************************************************
 * Creates the layout of the widget.
 ******************************************************************************/
void AudioRecorder::createLayout()
{
    QHBoxLayout *primera_linea = new QHBoxLayout;
    primera_linea->addWidget(relojLCD);

    QHBoxLayout *segunda_linea = new QHBoxLayout;
    segunda_linea->addWidget(boton_rec);
    segunda_linea->addWidget(boton_play);
    segunda_linea->addWidget(boton_stop);

    QHBoxLayout *tercera_linea = new QHBoxLayout;
    tercera_linea->addWidget(texto1);
    tercera_linea->addWidget(indice);

    QHBoxLayout *cuarta_linea = new QHBoxLayout;
    cuarta_linea->addWidget(check_audiodes);
    cuarta_linea->addWidget(check_audiodob);

    QHBoxLayout *quinta_linea = new QHBoxLayout;
    quinta_linea->addWidget(texto3);
    quinta_linea->addWidget(retraso);

    QHBoxLayout *sexta_linea = new QHBoxLayout;
    sexta_linea->addWidget(texto4);
    sexta_linea->addWidget(frecuencias_muestreo);

//    QHBoxLayout *septima_linea = new QHBoxLayout;
//    septima_linea->addWidget(texto5);
//    septima_linea->addWidget(idiomas);


    QVBoxLayout *AudioRecorderLayout = new QVBoxLayout;
    AudioRecorderLayout->addLayout(primera_linea);
    AudioRecorderLayout->addLayout(segunda_linea);

    QVBoxLayout *opcionesLayout = new QVBoxLayout;
    opcionesLayout->addLayout(tercera_linea);
    opcionesLayout->addLayout(cuarta_linea);
    opcionesLayout->addLayout(quinta_linea);
    opcionesLayout->addLayout(sexta_linea);
    //opcionesLayout->addLayout(septima_linea);


    QGroupBox *AudioRecorderBox = new QGroupBox(tr("Audio Recorder"));
    AudioRecorderBox->setLayout(AudioRecorderLayout);
    AudioRecorderBox->setFont(COMMON_LABEL_FONT);

    QGroupBox *opcionesBox = new QGroupBox(tr("Options"));
    opcionesBox->setLayout(opcionesLayout);
    opcionesBox->setFont(COMMON_LABEL_FONT);


    QGridLayout *grid = new QGridLayout;
    grid->addWidget(AudioRecorderBox, 0, 0);
    grid->addWidget(opcionesBox, 1, 0);

    setLayout(grid);

    setFixedSize(220,300);
}

/******************************************************************************
 * <SLOT>
 * Enables the autodocking of the media player dialog.
 ******************************************************************************/
void AudioRecorder::showDockableAudioRecorder()
{
    mainwin->addDockWidget(Qt::RightDockWidgetArea, audioRecorderDockWidget,Qt::Horizontal);
    audioRecorderDockWidget->show();
}

/******************************************************************************
 * <SLOT>
 * Hide the docking panel of the media player dialog.
 ******************************************************************************/
void AudioRecorder::hideDockableAudioRecorder()
{
    audioRecorderDockWidget->hide();
}

/******************************************************************************
 * <SLOT>
 * Stop reproducing the audio file in the case the player window is closed.
 * Args:
 * - QCloseEvent *event - Closing event.
 ******************************************************************************/
void AudioRecorder::closeEvent(QCloseEvent *event)
{
    reloj->stop();
    mediaObject->stop();
    relojLCD->display(tr("00:00.000"));
    event->accept();
}

/******************************************************************************
 * <SLOT>
 * Updates the LCD's cronometer in case if the audio is being recorded
 ******************************************************************************/
void AudioRecorder::crono()
{
    int incremento;

    if ((stop==false)&&(reproduccion==false)){
        hora_actual = QTime::currentTime();
        incremento = (hora_actual.msec()%1000)-(hora_anterior.msec()%1000);
        if(incremento<0)
            incremento = (hora_actual.msec()%1000) + (1000-(hora_anterior.msec()%1000));
        hora_anterior = hora_actual;
        cronometro = cronometro.addMSecs(incremento);
        relojLCD->display(cronometro.toString("mm:ss.zzz"));
        relojLCD->setNumDigits(9);
    }
}


/******************************************************************************
 * <SLOT>
 * Updates the LCD's cronometer in case if the audio is being reproduced
 ******************************************************************************/
void AudioRecorder::crono_reproductor()
{
    ms_actual = mediaObject->currentTime();
    sec = ms_actual / 1000;
    min = sec / 60;
    hour = min / 60;
    msec = ms_actual;
    QTime actualTime(hour%60, min%60, sec%60, msec%1000);
    QString hora;
    hora = actualTime.toString("mm:ss.zzz");
    relojLCD->display(hora);
    ms_actual_anterior = ms_actual;
}


/******************************************************************************
 * <SLOT>
 * Updates the LCD's cronometer in case if the audio is being reproduced
 ******************************************************************************/
// Slot grabar. Comienza la grabación de audio del micro.
void AudioRecorder::grabar()
{

    boton_play->setEnabled(false);
    boton_rec->setEnabled(false);
    frecuencias_muestreo->setEnabled(false);

    QAudioFormat format;
    QString directorio;
    QString Nombre_Archivo;
    QString Nombre_ensubs;
    QString idioma;

    format.setFrequency(frecuencia_seleccionada);
    format.setChannels(1);
    format.setSampleSize(16);
    format.setCodec("audio/pcm");
    format.setByteOrder(QAudioFormat::LittleEndian);
    format.setSampleType(QAudioFormat::SignedInt);

    idioma = idiomas->currentText().left(3);
    QString marca1("<>");
    marca1.insert(1,idioma);
    QString marca2("</>");
    marca2.insert(2,idioma);


    QAudioDeviceInfo info(QAudioDeviceInfo::defaultInputDevice());
    if (!info.isFormatSupported(format)) {
        qWarning()<<"default format not supported try to use nearest";
        format = info.nearestFormat(format);
    }

    if (check_audiodes->isChecked()==true)
    {
        Nombre_Archivo = ("audiodescriptor");
        Nombre_Archivo.append(QString::number(indice->value()));
        Nombre_Archivo.append("_");
        Nombre_Archivo.append(idiomas->currentText().left(3));
        Nombre_Archivo.append(".wav");
        Nombre_ensubs = Nombre_Archivo;
        Nombre_ensubs.prepend(marca1);
        Nombre_ensubs.append(marca2);
        emit cargar_audiodescriptor(indice->value(),Nombre_ensubs,retraso->text());
        directorio = Directorio_AUD;
        directorio.append(Nombre_Archivo);
        Nombre_Archivo = directorio;
    }

    if (check_audiodob->isChecked()==true)
    {
        Nombre_Archivo = ("subtitulo_hablado");
        Nombre_Archivo.append(QString::number(indice->value()));
        Nombre_Archivo.append("_");
        Nombre_Archivo.append(idiomas->currentText().left(3));
        Nombre_Archivo.append(".wav");
        Nombre_ensubs = Nombre_Archivo;
        Nombre_ensubs.prepend(marca1);
        Nombre_ensubs.append(marca2);
        emit cargar_audiodoblado(indice->value(),Nombre_ensubs);
        directorio = Directorio_DOB;
        directorio.append(Nombre_Archivo);
        Nombre_Archivo = directorio;
    }

    bool escribir;
    int respuesta=0;
    escribir=true;
    QMessageBox msgBox;

    if (QFile::exists(Nombre_Archivo))
    {
        msgBox.setText("El archivo existe.¿Quiere sobreescribirlo?");
        msgBox.setStandardButtons(QMessageBox::Ok| QMessageBox::Cancel);
        respuesta = msgBox.exec();
    }

    switch (respuesta) {
      case QMessageBox::Ok:
        {
            QFile::remove(Nombre_Archivo);
            escribir =true;
            break;
        }
      case QMessageBox::Cancel:
        {
            escribir = false;
            break;
        }
      }

    if(escribir == true)
    {
        Audiowav outputFile(Nombre_Archivo, format);
        cronometro.setHMS(0,0,0,0);
        hora_anterior = QTime::currentTime();
        stop=false;
        reproduccion=false;

        if (outputFile.open())
        {
            reloj->start();
            QAudioInput audio(format);
            audio.start(&outputFile);
            loop.exec();
        }
        else
        {
            qDebug() << "Error" << outputFile.errorString();
        }
        outputFile.close();
    }

    boton_play->setEnabled(true);
    boton_rec->setEnabled(true);
    frecuencias_muestreo->setEnabled(true);
}


/******************************************************************************
 * <SLOT>
 * Reproduces the selected archive.
 ******************************************************************************/
void AudioRecorder::reproducir()
{
    QString Nombre_Archivo;

    if (check_audiodes->isChecked() ==true)
    {
        Nombre_Archivo = Directorio_AUD;
        Nombre_Archivo.append("audiodescriptor");
        Nombre_Archivo.append(QString::number(indice->value()));
        Nombre_Archivo.append("_");
        Nombre_Archivo.append(idiomas->currentText().left(3));
        Nombre_Archivo.append(".wav");
    }

    if (check_audiodob->isChecked()==true)
    {
        Nombre_Archivo = Directorio_DOB;
        Nombre_Archivo.append("subtitulo_hablado");
        Nombre_Archivo.append(QString::number(indice->value()));
        Nombre_Archivo.append("_");
        Nombre_Archivo.append(idiomas->currentText().left(3));
        Nombre_Archivo.append(".wav");
    }

    if (QFile::exists(Nombre_Archivo)){
        boton_rec->setEnabled(false);
        mediaObject->setCurrentSource(Nombre_Archivo);
                mediaObject->setTickInterval(100);
                connect(mediaObject, SIGNAL(finished()),this,SLOT(parar()));
                connect(mediaObject,SIGNAL(tick(qint64)),this,SLOT(crono_reproductor()));
        mediaObject->play();
    }
}


/******************************************************************************
 * <SLOT>
 * Switches the options to record audio descriptions.
 ******************************************************************************/
void AudioRecorder::modo_audiodescriptor()
{
    if (check_audiodob->isChecked()==true)
        check_audiodob->setChecked(false);
}


/******************************************************************************
 * <SLOT>
 * Switches the options to record subtitles.
 ******************************************************************************/
void AudioRecorder::modo_audiodoblado()
{
    if (check_audiodes->isChecked()==true)
        check_audiodes->setChecked(false);
}


/******************************************************************************
 * <SLOT>
 * Switches the smapling rate of the recording.
 ******************************************************************************/
// Slot cambio_frecuencia. Cambia la frecuencia de grabación.
void AudioRecorder::cambio_frecuencia()
{
    int indice;
    indice = frecuencias_muestreo->currentIndex();
    frecuencia_seleccionada = frecuencias.at(indice);
}

/******************************************************************************
 * <SLOT>
 * Initilizes the working paths where the recorded audio files are stored.
 ******************************************************************************/
void AudioRecorder::inicializar(QString &dir_AUD, QString &dir_DOB)
{
    Directorio_AUD = dir_AUD;
    Directorio_DOB = dir_DOB;
}

/******************************************************************************
 * <SLOT>
 * Stops the reproduction or recording of the audio file.
 ******************************************************************************/
void AudioRecorder::parar()
{
    boton_rec->setEnabled(true);
        frecuencias_muestreo->setEnabled(true);
    reloj->stop();
    mediaObject->stop();
    mediaObject->setCurrentSource(tr("nada"));
    loop.quit();
    stop=true;
    mediaObject->disconnect();
}

